/** Declaration file generated by dts-gen */
declare module 'klaviyo-api' {
    export class ApiClient {
        constructor();

        applyAuthToRequest(request: any, authNames: any): void;

        buildCollectionParam(param: any, collectionFormat: any): any;

        buildUrl(path: any, pathParams: any): any;

        callApi(
            path: any,
            httpMethod: any,
            pathParams: any,
            queryParams: any,
            headerParams: any,
            formParams: any,
            bodyParam: any,
            authNames: any,
            contentTypes: any,
            accepts: any,
            returnType: any,
        ): any;

        deserialize(response: any, returnType: any): any;

        isFileParam(param: any): any;

        isJsonMime(contentType: any): any;

        jsonPreferredMime(contentTypes: any): any;

        normalizeParams(params: any): any;

        paramToString(param: any): any;

        static CollectionFormatEnum: {
            CSV: string;
            MULTI: string;
            PIPES: string;
            SSV: string;
            TSV: string;
        };

        static constructFromObject(data: any, obj: any, itemType: any): void;

        static convertToType(data: any, type: any): any;

        static parseDate(str: any): any;
    }

    export class AudiencesSubObject {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCloneQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCloneQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            campaign: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCloneQueryAsSubResourceAttributes {
        constructor(id: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            campaign: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignCreateQueryAsSubResourceAttributes {
        constructor(name: any, channel: any, audiences: any, sendStrategy: any, sendOptions: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessageAssignTemplateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessageAssignTemplateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            campaignMessage: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessageAssignTemplateQueryAsSubResourceAttributes {
        constructor(id: any, templateId: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessagePartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessagePartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            campaignMessage: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignMessagePartialUpdateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignPartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignPartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            campaign: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignPartialUpdateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            campaignSendJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobCreateQueryAsSubResourceAttributes {
        constructor(id: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobPartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobPartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            campaignSendJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CampaignSendJobPartialUpdateQueryAsSubResourceAttributes {
        constructor(action: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogCategoryBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateJobCreateQueryAsSubResourceAttributes {
        constructor(categories: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogCategory: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryCreateQueryAsSubResourceAttributes {
        constructor(externalId: any, name: any);

        static IntegrationTypeEnum: {
            custom: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryDeleteJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryDeleteJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogCategoryBulkDeleteJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryDeleteJobCreateQueryAsSubResourceAttributes {
        constructor(categories: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryDeleteQueryAsSubResource {
        constructor(type: any, id: any);

        static TypeEnum: {
            catalogCategory: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryItemOp {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogCategoryBulkUpdateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateJobCreateQueryAsSubResourceAttributes {
        constructor(categories: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            catalogCategory: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogCategoryUpdateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCategoryOp {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogItemBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateJobCreateQueryAsSubResourceAttributes {
        constructor(items: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogItem: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQueryAsSubResourceAttributes {
        constructor(externalId: any, title: any, description: any, url: any);

        static IntegrationTypeEnum: {
            custom: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQueryAsSubResourceRelationships {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQueryAsSubResourceRelationshipsCategories {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemCreateQueryAsSubResourceRelationshipsCategoriesData {
        constructor(type: any, id: any);

        static TypeEnum: {
            catalogCategory: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemDeleteJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemDeleteJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogItemBulkDeleteJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemDeleteJobCreateQueryAsSubResourceAttributes {
        constructor(items: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemDeleteQueryAsSubResource {
        constructor(type: any, id: any);

        static TypeEnum: {
            catalogItem: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogItemBulkUpdateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateJobCreateQueryAsSubResourceAttributes {
        constructor(items: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            catalogItem: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogItemUpdateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogJobErrorPayload {
        constructor(id: any, code: any, title: any, detail: any, source: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogVariantBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateJobCreateQueryAsSubResourceAttributes {
        constructor(variants: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogVariant: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQueryAsSubResourceAttributes {
        constructor(
            externalId: any,
            title: any,
            description: any,
            sku: any,
            inventoryPolicy: any,
            inventoryQuantity: any,
            price: any,
            url: any,
        );

        static IntegrationTypeEnum: {
            custom: string;
        };

        static InventoryPolicyEnum: object;

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQueryAsSubResourceRelationships {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQueryAsSubResourceRelationshipsItems {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantCreateQueryAsSubResourceRelationshipsItemsData {
        constructor(type: any, id: any);

        static TypeEnum: {
            catalogItem: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantDeleteJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantDeleteJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogVariantBulkDeleteJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantDeleteJobCreateQueryAsSubResourceAttributes {
        constructor(variants: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantDeleteQueryAsSubResource {
        constructor(type: any, id: any);

        static TypeEnum: {
            catalogVariant: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            catalogVariantBulkUpdateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateJobCreateQueryAsSubResourceAttributes {
        constructor(variants: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            catalogVariant: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class CatalogVariantUpdateQueryAsSubResourceAttributes {
        constructor();

        static InventoryPolicyEnum: object;

        static constructFromObject(data: any, obj: any): any;
    }

    export class ContentSubObject {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class DataPrivacyCreateDeletionJobQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class DataPrivacyCreateDeletionJobQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            dataPrivacyDeletionJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class DataPrivacyCreateDeletionJobQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class EmailMessageContent {
        constructor(subject: any, previewText: any, fromEmail: any, fromName: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class EmailTrackingOptions {
        constructor(addUtm: any, utmParams: any, isTrackingOpens: any, isTrackingClicks: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ErrorSource {
        constructor(pointer: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class EventCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class EventCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            event: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class EventCreateQueryAsSubResourceAttributes {
        constructor(profile: any, metric: any, properties: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class FlowUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class FlowUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            flow: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class FlowUpdateQueryAsSubResourceAttributes {
        constructor(status: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedCategories {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            catalogCategory: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedCategoriesAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowAction {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            flowAction: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowActions {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            flowAction: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowActionsAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowMessages {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            flowMessage: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowMessagesAttributes {
        constructor(name: any, channel: any, content: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlows {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            flow: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedFlowsAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedItems {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            catalogItem: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedItemsAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedLists {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            list: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedListsAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedMetrics {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            metric: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedMetricsAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedProfiles {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            profile: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedProfilesAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedSegments {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            segment: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedVariants {
        constructor(type: any, id: any, attributes: any, links: any);

        static TypeEnum: {
            catalogVariant: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedVariantsAttributes {
        constructor();

        static InventoryPolicyEnum: object;

        static constructFromObject(data: any, obj: any): any;
    }

    export class IncludedVariantsLinks {
        constructor(self: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class InlineResponse4XX {
        constructor(errors: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class InlineResponse4XXErrors {
        constructor(id: any, code: any, title: any, detail: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class InlineResponse4XXSource {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            list: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListCreateQueryAsSubResourceAttributes {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListMembersAddQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListMembersAddQueryData {
        constructor(type: any, id: any);

        static TypeEnum: {
            profile: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListMembersDeleteQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListPartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ListPartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            list: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class MetricAggregateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class MetricAggregateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            metricAggregate: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class MetricAggregateQueryAsSubResourceAttributes {
        constructor(metricId: any, measurements: any, interval: any, filter: any);

        static ByEnum: {
            URL: string;
            attributedChannel: string;
            attributedFlow: string;
            attributedMessage: string;
            attributedVariation: string;
            bounceType: string;
            campaignChannel: string;
            campaignName: string;
            clientCanonical: string;
            clientName: string;
            clientType: string;
            emailDomain: string;
            failureSource: string;
            failureType: string;
            flow: string;
            flowChannel: string;
            formId: string;
            fromNumber: string;
            fromPhoneRegion: string;
            list: string;
            message: string;
            messageName: string;
            messageSendCohort: string;
            messageType: string;
            method: string;
            subject: string;
            toNumber: string;
            toPhoneRegion: string;
            variation: string;
            variationSendCohort: string;
        };

        static IntervalEnum: {
            day: string;
            hour: string;
            month: string;
            week: string;
        };

        static MeasurementsEnum: {
            count: string;
            sumValue: string;
            unique: string;
        };

        static SortEnum: {
            URL: string;
            attributedChannel: string;
            attributedChannel_1: string;
            attributedFlow: string;
            attributedFlow_3: string;
            attributedMessage: string;
            attributedMessage_5: string;
            attributedVariation: string;
            attributedVariation_7: string;
            bounceType: string;
            bounceType_23: string;
            campaignChannel: string;
            campaignChannel_9: string;
            campaignName: string;
            campaignName_25: string;
            clientCanonical: string;
            clientCanonical_27: string;
            clientName: string;
            clientName_29: string;
            clientType: string;
            clientType_31: string;
            count: string;
            count_59: string;
            emailDomain: string;
            emailDomain_33: string;
            failureSource: string;
            failureSource_35: string;
            failureType: string;
            failureType_37: string;
            flow: string;
            flowChannel: string;
            flowChannel_13: string;
            flow_11: string;
            formId: string;
            formId_61: string;
            fromNumber: string;
            fromNumber_39: string;
            fromPhoneRegion: string;
            fromPhoneRegion_41: string;
            list: string;
            list_43: string;
            message: string;
            messageName: string;
            messageName_45: string;
            messageSendCohort: string;
            messageSendCohort_17: string;
            messageType: string;
            messageType_47: string;
            message_15: string;
            method: string;
            method_49: string;
            subject: string;
            subject_51: string;
            sumValue: string;
            sumValue_63: string;
            toNumber: string;
            toNumber_53: string;
            toPhoneRegion: string;
            toPhoneRegion_55: string;
            unique: string;
            unique_65: string;
            variation: string;
            variationSendCohort: string;
            variationSendCohort_21: string;
            variation_19: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class MetricAggregateRowDTO {
        constructor(dimensions: any, measurements: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class MetricCreateQuery {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteProfileCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteProfileCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profile: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteProfileMeta {
        constructor(identifiers: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteProfileMetaIdentifiers {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteSubscriptionCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteSubscriptionCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            subscription: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class OnsiteSubscriptionCreateQueryAsSubResourceAttributes {
        constructor(listId: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfileCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfileCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profile: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfileCreateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfileLocation {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfilePartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class ProfilePartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            profile: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class SMSMessageContent {
        constructor(body: any, media: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SMSRenderOptions {
        constructor(shortenLinks: any, addOrgPrefix: any, addInfoLink: any, addOptOutLanguage: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SMSTrackingOptions {
        constructor(addUtm: any, utmParams: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SegmentPartialUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SegmentPartialUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            segment: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class SendOptions {
        constructor(useSmartSending: any, isTransactional: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SendOptionsSubObject {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class SendStrategySubObject {
        constructor(method: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SendTimeSubObject {
        constructor(datetime: any, isLocal: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class StaticScheduleOptions {
        constructor(datetime: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class Subscription {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class SubscriptionCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SubscriptionCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profileSubscriptionBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class SubscriptionCreateJobCreateQueryAsSubResourceAttributes {
        constructor(listId: any, subscriptions: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class Suppression {
        constructor(email: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SuppressionCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class SuppressionCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profileSuppressionBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class SuppressionCreateJobCreateQueryAsSubResourceAttributes {
        constructor(suppressions: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            tag: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagCreateQueryAsSubResourceAttributes {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            tagGroup: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupCreateQueryAsSubResourceAttributes {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            tagGroup: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagGroupUpdateQueryAsSubResourceAttributes {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagSegmentOp {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagSegmentOpData {
        constructor(type: any, id: any);

        static TypeEnum: {
            segment: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            tag: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TagUpdateQueryAsSubResourceAttributes {
        constructor(name: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCloneQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCloneQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            template: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCloneQueryAsSubResourceAttributes {
        constructor(id: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            template: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateCreateQueryAsSubResourceAttributes {
        constructor(name: any, editorType: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateRenderQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateRenderQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            template: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateRenderQueryAsSubResourceAttributes {
        constructor(id: any, context: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateUpdateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateUpdateQueryAsSubResource {
        constructor(type: any, id: any, attributes: any);

        static TypeEnum: {
            template: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class TemplateUpdateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class ThrottledScheduleOptions {
        constructor(datetime: any, throttlePercentage: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class TrackingOptionsSubObject {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class UTMParamsSubObject {
        constructor(name: any, value: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsubscriptionCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsubscriptionCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profileUnsubscriptionBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsubscriptionCreateJobCreateQueryAsSubResourceAttributes {
        constructor();

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsuppressionCreateJobCreateQuery {
        constructor(data: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsuppressionCreateJobCreateQueryAsSubResource {
        constructor(type: any, attributes: any);

        static TypeEnum: {
            profileUnsuppressionBulkCreateJob: string;
        };

        static constructFromObject(data: any, obj: any): any;
    }

    export class UnsuppressionCreateJobCreateQueryAsSubResourceAttributes {
        constructor(suppressions: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class UtmParamInfo {
        constructor(name: any, value: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export class V2TemplateRenderQueryAsSubResource {
        constructor(id: any);

        static constructFromObject(data: any, obj: any): any;
    }

    export function CatalogsApi(apiClient: any, ...args: any[]): any;

    export function ClientApi(apiClient: any, ...args: any[]): any;

    export function ConfigWrapper(authKey: any, ...args: any[]): any;

    export function DataPrivacyApi(apiClient: any, ...args: any[]): any;

    export function EventsApi(apiClient: any, ...args: any[]): any;

    export function FlowsApi(apiClient: any, ...args: any[]): any;

    export function ListsApi(apiClient: any, ...args: any[]): any;

    export function MetricsApi(apiClient: any, ...args: any[]): any;

    export function OneOfIncludedFlowActionsAttributesTrackingOptions(): void;

    export function OneOfIncludedFlowMessagesAttributesContent(): void;

    export function OneOfProfileLocationLatitude(): void;

    export function OneOfProfileLocationLongitude(): void;

    export function ProfilesApi(apiClient: any, ...args: any[]): any;

    export function SegmentsApi(apiClient: any, ...args: any[]): any;

    export function TagsApi(apiClient: any, ...args: any[]): any;

    export function TemplatesApi(apiClient: any, ...args: any[]): any;

    export namespace ApiClient {
        namespace instance {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.ApiClient.instance.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.ApiClient.instance.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.ApiClient.instance.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.ApiClient.instance.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Catalogs {
        function createCatalogCategory(_x: any, ...args: any[]): any;

        function createCatalogCategoryRelationships(_x2: any, _x3: any, _x4: any, ...args: any[]): any;

        function createCatalogItem(_x5: any, ...args: any[]): any;

        function createCatalogItemRelationships(_x6: any, _x7: any, _x8: any, ...args: any[]): any;

        function createCatalogVariant(_x9: any, ...args: any[]): any;

        function deleteCatalogCategory(_x10: any, ...args: any[]): any;

        function deleteCatalogCategoryRelationships(_x11: any, _x12: any, _x13: any, ...args: any[]): any;

        function deleteCatalogItem(_x14: any, ...args: any[]): any;

        function deleteCatalogItemRelationships(_x15: any, _x16: any, _x17: any, ...args: any[]): any;

        function deleteCatalogVariant(_x18: any, ...args: any[]): any;

        function getCatalogCategories(_x19: any, ...args: any[]): any;

        function getCatalogCategory(_x20: any, _x21: any, ...args: any[]): any;

        function getCatalogCategoryItems(_x22: any, _x23: any, ...args: any[]): any;

        function getCatalogCategoryRelationships(_x24: any, _x25: any, _x26: any, ...args: any[]): any;

        function getCatalogItem(_x27: any, _x28: any, ...args: any[]): any;

        function getCatalogItemCategories(_x29: any, _x30: any, ...args: any[]): any;

        function getCatalogItemRelationships(_x31: any, _x32: any, _x33: any, ...args: any[]): any;

        function getCatalogItemVariants(_x34: any, _x35: any, ...args: any[]): any;

        function getCatalogItems(_x36: any, ...args: any[]): any;

        function getCatalogVariant(_x37: any, _x38: any, ...args: any[]): any;

        function getCatalogVariants(_x39: any, ...args: any[]): any;

        function getCreateCategoriesJob(_x40: any, _x41: any, ...args: any[]): any;

        function getCreateCategoriesJobs(_x42: any, ...args: any[]): any;

        function getCreateItemsJob(_x43: any, _x44: any, ...args: any[]): any;

        function getCreateItemsJobs(_x45: any, ...args: any[]): any;

        function getCreateVariantsJob(_x46: any, _x47: any, ...args: any[]): any;

        function getCreateVariantsJobs(_x48: any, ...args: any[]): any;

        function getDeleteCategoriesJob(_x49: any, _x50: any, ...args: any[]): any;

        function getDeleteCategoriesJobs(_x51: any, ...args: any[]): any;

        function getDeleteItemsJob(_x52: any, _x53: any, ...args: any[]): any;

        function getDeleteItemsJobs(_x54: any, ...args: any[]): any;

        function getDeleteVariantsJob(_x55: any, _x56: any, ...args: any[]): any;

        function getDeleteVariantsJobs(_x57: any, ...args: any[]): any;

        function getUpdateCategoriesJob(_x58: any, _x59: any, ...args: any[]): any;

        function getUpdateCategoriesJobs(_x60: any, ...args: any[]): any;

        function getUpdateItemsJob(_x61: any, _x62: any, ...args: any[]): any;

        function getUpdateItemsJobs(_x63: any, ...args: any[]): any;

        function getUpdateVariantsJob(_x64: any, _x65: any, ...args: any[]): any;

        function getUpdateVariantsJobs(_x66: any, ...args: any[]): any;

        function spawnCreateCategoriesJob(_x67: any, ...args: any[]): any;

        function spawnCreateItemsJob(_x68: any, ...args: any[]): any;

        function spawnCreateVariantsJob(_x69: any, ...args: any[]): any;

        function spawnDeleteCategoriesJob(_x70: any, ...args: any[]): any;

        function spawnDeleteItemsJob(_x71: any, ...args: any[]): any;

        function spawnDeleteVariantsJob(_x72: any, ...args: any[]): any;

        function spawnUpdateCategoriesJob(_x73: any, ...args: any[]): any;

        function spawnUpdateItemsJob(_x74: any, ...args: any[]): any;

        function spawnUpdateVariantsJob(_x75: any, ...args: any[]): any;

        function updateCatalogCategory(_x76: any, _x77: any, ...args: any[]): any;

        function updateCatalogCategoryRelationships(_x78: any, _x79: any, _x80: any, ...args: any[]): any;

        function updateCatalogItem(_x81: any, _x82: any, ...args: any[]): any;

        function updateCatalogItemRelationships(_x83: any, _x84: any, _x85: any, ...args: any[]): any;

        function updateCatalogVariant(_x86: any, _x87: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Catalogs.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Catalogs.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Catalogs.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Catalogs.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Client {
        function createClientEvent(_x: any, _x2: any, ...args: any[]): any;

        function createClientProfile(_x3: any, _x4: any, ...args: any[]): any;

        function createClientSubscription(_x5: any, _x6: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Client.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Client.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Client.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Client.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace DataPrivacy {
        function requestProfileDeletion(_x: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.DataPrivacy.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.DataPrivacy.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.DataPrivacy.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.DataPrivacy.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Events {
        function createEvent(_x: any, ...args: any[]): any;

        function getEvent(_x2: any, _x3: any, ...args: any[]): any;

        function getEventMetrics(_x4: any, _x5: any, ...args: any[]): any;

        function getEventProfiles(_x6: any, _x7: any, ...args: any[]): any;

        function getEventRelationships(_x8: any, _x9: any, ...args: any[]): any;

        function getEvents(_x10: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Events.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Events.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Events.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Events.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Flows {
        function getFlow(_x: any, _x2: any, ...args: any[]): any;

        function getFlowAction(_x3: any, _x4: any, ...args: any[]): any;

        function getFlowActionFlow(_x5: any, _x6: any, ...args: any[]): any;

        function getFlowActionMessages(_x7: any, _x8: any, ...args: any[]): any;

        function getFlowActionRelationships(_x9: any, _x10: any, _x11: any, ...args: any[]): any;

        function getFlowFlowActions(_x12: any, _x13: any, ...args: any[]): any;

        function getFlowMessage(_x14: any, _x15: any, ...args: any[]): any;

        function getFlowMessageAction(_x16: any, _x17: any, ...args: any[]): any;

        function getFlowMessageRelationships(_x18: any, _x19: any, ...args: any[]): any;

        function getFlowRelationships(_x20: any, _x21: any, ...args: any[]): any;

        function getFlowTags(_x22: any, _x23: any, ...args: any[]): any;

        function getFlows(_x24: any, ...args: any[]): any;

        function updateFlow(_x25: any, _x26: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Flows.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Flows.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Flows.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Flows.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Lists {
        function createList(_x: any, ...args: any[]): any;

        function createListRelationships(_x2: any, _x3: any, _x4: any, ...args: any[]): any;

        function deleteList(_x5: any, ...args: any[]): any;

        function deleteListRelationships(_x6: any, _x7: any, _x8: any, ...args: any[]): any;

        function getList(_x9: any, _x10: any, ...args: any[]): any;

        function getListProfiles(_x11: any, _x12: any, ...args: any[]): any;

        function getListRelationships(_x13: any, _x14: any, _x15: any, ...args: any[]): any;

        function getListTags(_x16: any, _x17: any, ...args: any[]): any;

        function getLists(_x18: any, ...args: any[]): any;

        function updateList(_x19: any, _x20: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Lists.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Lists.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Lists.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Lists.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Metrics {
        function getMetric(_x: any, _x2: any, ...args: any[]): any;

        function getMetrics(_x3: any, ...args: any[]): any;

        function queryMetricAggregates(_x4: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Metrics.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Metrics.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Metrics.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Metrics.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace OneOfIncludedFlowActionsAttributesTrackingOptions {
        function constructFromObject(data: any, obj: any): any;
    }

    export namespace OneOfIncludedFlowMessagesAttributesContent {
        function constructFromObject(data: any, obj: any): any;
    }

    export namespace OneOfProfileLocationLatitude {
        function constructFromObject(data: any, obj: any): any;
    }

    export namespace OneOfProfileLocationLongitude {
        function constructFromObject(data: any, obj: any): any;
    }

    export namespace Profiles {
        function createProfile(_x: any, ...args: any[]): any;

        function getProfile(_x2: any, _x3: any, ...args: any[]): any;

        function getProfileLists(_x4: any, _x5: any, ...args: any[]): any;

        function getProfileRelationships(_x6: any, _x7: any, ...args: any[]): any;

        function getProfileSegments(_x8: any, _x9: any, ...args: any[]): any;

        function getProfiles(_x10: any, ...args: any[]): any;

        function subscribeProfiles(_x11: any, ...args: any[]): any;

        function suppressProfiles(_x12: any, ...args: any[]): any;

        function unsubscribeProfiles(_x13: any, ...args: any[]): any;

        function unsuppressProfiles(_x14: any, ...args: any[]): any;

        function updateProfile(_x15: any, _x16: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Profiles.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Profiles.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Profiles.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Profiles.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Segments {
        function getSegment(_x: any, _x2: any, ...args: any[]): any;

        function getSegmentProfiles(_x3: any, _x4: any, ...args: any[]): any;

        function getSegmentRelationships(_x5: any, _x6: any, _x7: any, ...args: any[]): any;

        function getSegmentTags(_x8: any, _x9: any, ...args: any[]): any;

        function getSegments(_x10: any, ...args: any[]): any;

        function updateSegment(_x11: any, _x12: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Segments.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Segments.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Segments.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Segments.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Tags {
        function createTag(_x: any, ...args: any[]): any;

        function createTagGroup(_x2: any, ...args: any[]): any;

        function createTagRelationships(_x3: any, _x4: any, _x5: any, ...args: any[]): any;

        function deleteTag(_x6: any, ...args: any[]): any;

        function deleteTagGroup(_x7: any, ...args: any[]): any;

        function deleteTagRelationships(_x8: any, _x9: any, _x10: any, ...args: any[]): any;

        function getTag(_x11: any, _x12: any, ...args: any[]): any;

        function getTagGroup(_x13: any, _x14: any, ...args: any[]): any;

        function getTagGroupRelationships(_x15: any, _x16: any, ...args: any[]): any;

        function getTagGroupTags(_x17: any, _x18: any, ...args: any[]): any;

        function getTagGroups(_x19: any, ...args: any[]): any;

        function getTagRelationships(_x20: any, _x21: any, ...args: any[]): any;

        function getTagTagGroup(_x22: any, _x23: any, ...args: any[]): any;

        function getTags(_x24: any, ...args: any[]): any;

        function updateTag(_x25: any, _x26: any, ...args: any[]): any;

        function updateTagGroup(_x27: any, _x28: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Tags.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Tags.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Tags.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Tags.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }

    export namespace Templates {
        function createTemplate(_x: any, ...args: any[]): any;

        function createTemplateClone(_x2: any, ...args: any[]): any;

        function createTemplateRender(_x3: any, ...args: any[]): any;

        function deleteTemplate(_x4: any, ...args: any[]): any;

        function getTemplate(_x5: any, _x6: any, ...args: any[]): any;

        function getTemplates(_x7: any, ...args: any[]): any;

        function updateTemplate(_x8: any, _x9: any, ...args: any[]): any;

        namespace apiClient {
            const RETRY_CODES: number[];

            const RETRY_MAX_ATTEMPTS: number;

            const STARTING_DELAY: number;

            const TIME_MULTIPLE: number;

            const authentications: {
                'Klaviyo-API-Key': {
                    in: string;
                    name: string;
                    type: string;
                };
            };

            const basePath: string;

            const cache: boolean;

            const defaultHeaders: {
                'User-Agent': string;
                revision: string;
            };

            const enableCookies: boolean;

            const requestAgent: any;

            const timeout: number;

            function applyAuthToRequest(request: any, authNames: any): void;

            function buildCollectionParam(param: any, collectionFormat: any): any;

            function buildUrl(path: any, pathParams: any): any;

            function callApi(
                path: any,
                httpMethod: any,
                pathParams: any,
                queryParams: any,
                headerParams: any,
                formParams: any,
                bodyParam: any,
                authNames: any,
                contentTypes: any,
                accepts: any,
                returnType: any,
            ): any;

            function deserialize(response: any, returnType: any): any;

            function isFileParam(param: any): any;

            function isJsonMime(contentType: any): any;

            function jsonPreferredMime(contentTypes: any): any;

            function normalizeParams(params: any): any;

            function paramToString(param: any): any;

            namespace agent {
                function accept(...args: any[]): any;

                function acl(url: any, fn: any): any;

                function auth(...args: any[]): any;

                function bind(url: any, fn: any): any;

                function buffer(...args: any[]): any;

                function ca(...args: any[]): any;

                function cert(...args: any[]): any;

                function checkout(url: any, fn: any): any;

                function connect(url: any, fn: any): any;

                function copy(url: any, fn: any): any;

                function del(url: any, fn: any): any;

                function disableTLSCerts(...args: any[]): any;

                function get(url: any, fn: any): any;

                function head(url: any, fn: any): any;

                function key(...args: any[]): any;

                function link(url: any, fn: any): any;

                function lock(url: any, fn: any): any;

                function merge(url: any, fn: any): any;

                function mkactivity(url: any, fn: any): any;

                function mkcalendar(url: any, fn: any): any;

                function mkcol(url: any, fn: any): any;

                function move(url: any, fn: any): any;

                function notify(url: any, fn: any): any;

                function ok(...args: any[]): any;

                function on(...args: any[]): any;

                function once(...args: any[]): any;

                function options(url: any, fn: any): any;

                function parse(...args: any[]): any;

                function patch(url: any, fn: any): any;

                function pfx(...args: any[]): any;

                function post(url: any, fn: any): any;

                function propfind(url: any, fn: any): any;

                function proppatch(url: any, fn: any): any;

                function purge(url: any, fn: any): any;

                function put(url: any, fn: any): any;

                function query(...args: any[]): any;

                function rebind(url: any, fn: any): any;

                function redirects(...args: any[]): any;

                function report(url: any, fn: any): any;

                function retry(...args: any[]): any;

                function search(url: any, fn: any): any;

                function serialize(...args: any[]): any;

                function set(...args: any[]): any;

                function sortQuery(...args: any[]): any;

                function source(url: any, fn: any): any;

                function subscribe(url: any, fn: any): any;

                function timeout(...args: any[]): any;

                function trace(url: any, fn: any): any;

                function type(...args: any[]): any;

                function unbind(url: any, fn: any): any;

                function unlink(url: any, fn: any): any;

                function unlock(url: any, fn: any): any;

                function unsubscribe(url: any, fn: any): any;

                function use(...args: any[]): any;

                function withCredentials(...args: any[]): any;

                namespace jar {
                    // Too-deep object hierarchy from klaviyo_api.Templates.apiClient.agent.jar
                    const getCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Templates.apiClient.agent.jar
                    const getCookies: any;

                    // Too-deep object hierarchy from klaviyo_api.Templates.apiClient.agent.jar
                    const setCookie: any;

                    // Too-deep object hierarchy from klaviyo_api.Templates.apiClient.agent.jar
                    const setCookies: any;
                }
            }
        }
    }
}
